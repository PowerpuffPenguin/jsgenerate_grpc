package configure

import (
	"encoding/json"
	"io/ioutil"
	"path/filepath"
	"sync"

	"{{pkg}}/logger"

	"github.com/google/go-jsonnet"
)

// Configure global configure
type Configure struct {
	HTTP     HTTP
	Module   Module
	JWT   JWT	{{if db}}
	DB       DB{{/if}}
	Logger   logger.Options
	basePath string
	filename string
}

// Format format global configure
func (c *Configure) Format() (e error) {
	if e = c.HTTP.Format(c.basePath); e != nil {
		return
	}
	if e = c.JWT.Format(c.basePath); e != nil {
		return
	}{{if db}}
	if e = c.DB.Format(c.basePath); e != nil {
		return
	}{{/if}}
	return
}
func (c *Configure) String() string {
	if c == nil {
		return "nil"
	}
	b, e := json.MarshalIndent(c, "", "	")
	if e != nil {
		return e.Error()
	}
	return string(b)
}

var defaultConfigure Configure
var defaultRW sync.RWMutex

// DefaultConfigure return default Configure
func DefaultConfigure() *Configure {
	return &defaultConfigure
}

// Reload reload data
func Reload(id string) (cnf *Configure, e error) {
	var c struct {
		Module struct {
			Data map[string]json.RawMessage
		}
	}

	b, e := ioutil.ReadFile(defaultConfigure.filename)
	if e != nil {
		return
	}
	vm := jsonnet.MakeVM()
	vm.Importer(&jsonnet.FileImporter{})
	var jsonStr string
	jsonStr, e = vm.EvaluateSnippet(defaultConfigure.filename, string(b))
	if e != nil {
		return
	}
	b = []byte(jsonStr)
	e = json.Unmarshal(b, &c)
	if e != nil {
		return
	}
	defaultRW.Lock()
	if id == "" {
		defaultConfigure.Module.Data = c.Module.Data
	} else {
		if c.Module.Data == nil {
			if defaultConfigure.Module.Data != nil {
				delete(defaultConfigure.Module.Data, id)
			}
		} else {
			if defaultConfigure.Module.Data == nil {
				defaultConfigure.Module.Data = make(map[string]json.RawMessage)
			}
			defaultConfigure.Module.Data[id] = c.Module.Data[id]
		}
	}
	defaultRW.Unlock()
	cnf = &defaultConfigure
	return
}

// BasePath .
func (c *Configure) BasePath() string {
	return c.basePath
}

// GetModuleData .
func (c *Configure) GetModuleData(id string) json.RawMessage {
	defaultRW.Lock()
	defer defaultRW.Unlock()
	if c.Module.Data == nil {
		return nil
	}
	return c.Module.Data[id]
}

// Load load configure file
func (c *Configure) Load(basePath, filename string) (e error) {
	if filepath.IsAbs(filename) {
		filename = filepath.Clean(filename)
	} else {
		filename, e = filepath.Abs(filename)
		if e != nil {
			return
		}
	}
	var b []byte
	b, e = ioutil.ReadFile(filename)
	if e != nil {
		return
	}
	vm := jsonnet.MakeVM()
	vm.Importer(&jsonnet.FileImporter{})
	var jsonStr string
	jsonStr, e = vm.EvaluateSnippet(filename, string(b))
	if e != nil {
		return
	}
	b = []byte(jsonStr)
	e = json.Unmarshal(b, c)
	if e != nil {
		return
	}
	c.basePath = basePath
	c.filename = filename
	return
}
