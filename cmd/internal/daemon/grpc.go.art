package daemon

import (
	"{{pkg}}/configure"
	"{{pkg}}/logger"
	"{{pkg}}/management"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
{{if gateway}}
	"strings"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"{{/if}}
	"go.uber.org/zap"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// Server 定義服務器
type Server struct {
	http2Server *http2.Server
	httpServer  *http.Server
	grpcServer  *grpc.Server{{if gateway}}
	clientConn  *grpc.ClientConn
	proxyMux    *runtime.ServeMux{{if gin}}
	httpService *httpService{{/if}}{{/if}}
}

func runGRPC() {
	cnf := configure.DefaultConfigure().HTTP
	// listen tcp
	l, e := net.Listen(`tcp`, cnf.Addr)
	if e != nil {
		if ce := logger.Logger.Check(zap.FatalLevel, "listen"); ce != nil {
			ce.Write(
				zap.Error(e),
			)
		}
		os.Exit(1)
	}
	defer l.Close()
	// new server
	var server Server
	go func() {
		ch := make(chan os.Signal, 2)
		signal.Notify(ch,
			os.Interrupt,
			os.Kill,
			syscall.SIGTERM)
		for {
			sig := <-ch
			switch sig {
			case os.Interrupt:
				server.Stop()
				return
			case syscall.SIGTERM:
				server.Stop()
				return
			}
		}
	}()
	// serve
	if cnf.H2() {
		if ce := logger.Logger.Check(zap.InfoLevel, "h2 work"); ce != nil {
			ce.Write(
				zap.String("addr", cnf.Addr),
			)
		}
		server.ServeTLS(l, cnf.CertFile, cnf.KeyFile)
	} else {
		if ce := logger.Logger.Check(zap.InfoLevel, "h2c work"); ce != nil {
			ce.Write(
				zap.String("addr", cnf.Addr),
			)
		}
		server.Serve(l)
	}
}

// Stop Server
func (s *Server) Stop() {
	s.httpServer.Close()
}

// Serve as h2c
func (s *Server) Serve(l net.Listener) error {
	e := s.init(true, l.Addr().String(), "", "")
	if e != nil {
		return e
	}
	mt := management.DefaultManagement()
	mt.OnStart(){{if gin}}
	s.httpService = newHTTPService(){{/if}}
	s.httpServer.Handler = h2c.NewHandler(s, s.http2Server)
	e = s.httpServer.Serve(l)
	mt.OnStop()
	return e
}

// ServeTLS as h2
func (s *Server) ServeTLS(l net.Listener, certFile, keyFile string) error {
	e := s.init(false, l.Addr().String(), certFile, keyFile)
	if e != nil {
		return e
	}
	mt := management.DefaultManagement()
	mt.OnStart(){{if gin}}
	s.httpService = newHTTPService(){{/if}}
	s.httpServer.Handler = s
	e = s.httpServer.ServeTLS(l, certFile, keyFile)
	mt.OnStop()
	return e
}
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	{{if gateway}}contextType := r.Header.Get(`Content-Type`)
	if strings.Contains(contextType, `application/grpc`) {
		s.grpcServer.ServeHTTP(w, r) // grpc service
	} else {
		{{if gin}}if s.httpService.CheckHTTP(r) {
			s.httpService.ServeHTTP(w, r) // gin service
			return
		}{{/if}}
		if r.Header.Get(`Authorization`) == `` {
			v := r.URL.Query().Get(`authorization`)
			if v != `` {
				r.Header.Set(`Authorization`, v)
			}
		}
		if r.Method == `GET` || r.Method == `HEAD` {
			r.Header.Set(`Method`, r.Method)
		}
		s.proxyMux.ServeHTTP(w, r) // gateway service
	}{{else}}s.grpcServer.ServeHTTP(w, r){{/if}}
}
func (s *Server) init(h2c bool, address, certFile, keyFile string) (e error) {
	var httpServer http.Server
	var http2Server http2.Server{{if gateway}}
	// new proxy server
	clientConn, mux, e := s.proxyServer(h2c, address)
	if e != nil {
		return
	}{{/if}}
	// configure http2
	e = http2.ConfigureServer(&httpServer, &http2Server)
	if e != nil {	{{if gateway}}
		clientConn.Close(){{/if}}
		return
	}
	// new rpc server
	mt := management.DefaultManagement()
	grpcServer := grpc.NewServer(
		grpc.UnaryInterceptor(mt.UnaryInterceptor),
		grpc.StreamInterceptor(mt.StreamInterceptor),
	)
	// register service
	mt.RegisterGRPC(grpcServer)
	// register grpc reflection
	reflection.Register(grpcServer)

	s.httpServer = &httpServer
	s.http2Server = &http2Server
	s.grpcServer = grpcServer{{if gateway}}
	s.clientConn = clientConn
	s.proxyMux = mux{{/if}}
	return
}
