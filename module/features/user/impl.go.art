package user

import (
	"context"
	"net/http"
	"strconv"

	"{{pkg}}/logger"
	grpc_user "{{pkg}}/protocol/features/user"
	"{{pkg}}/utils"

	"{{pkg}}/module"
	"{{pkg}}/module/features/user/internal/db"

	"go.uber.org/zap"
	"google.golang.org/grpc/codes"
)

type _Impl struct {
	module.Service
}

var emptyFindResponse grpc_user.FindResponse

func (s _Impl) Find(ctx context.Context, request *grpc_user.FindRequest) (response *grpc_user.FindResponse, e error) {
	TAG := `user Find`
	var limit int64 = 100
	if request.Limit < 1 || request.Limit > limit {
		e = s.Error(codes.InvalidArgument, `limit must range [1,`+strconv.FormatInt(limit, 10)+`]`)
		return
	}
	offset := int64(utils.MaxInt) - 100
	if request.Offset < 0 || request.Offset > offset {
		e = s.Error(codes.InvalidArgument, `offset must range [1,`+strconv.FormatInt(offset, 10)+`]`)
		return
	}
	nothit, e := s.ServeMessage(ctx, db.LastModified(), func(nobody bool) error {
		if nobody {
			response = &emptyFindResponse
		} else {
			var e error
			response, e = db.Find(request)
			if e != nil {
				return e
			}
		}
		return nil
	})
	if e != nil {
		if ce := logger.Logger.Check(zap.WarnLevel, TAG); ce != nil {
			ce.Write(
				zap.Error(e),
			)
		}
		return
	}
	if nothit {
		s.SetHTTPCacheMaxAge(ctx, 0)
	}
	return
}
func (s _Impl) Add(ctx context.Context, request *grpc_user.AddRequest) (response *grpc_user.AddResponse, e error) {
	TAG := `user Add`
	session, e := s.Session(ctx)
	if e != nil {
		return
	}
	if !utils.MatchName(request.Name) {
		e = s.Error(codes.InvalidArgument, `invalid name`)
		return
	} else if !utils.MatchPassword(request.Password) {
		e = s.Error(codes.InvalidArgument, `invalid password`)
		return
	}
	id, e := db.Add(request.Name, request.Nickname, request.Password, request.Authorization)
	if e != nil {
		if ce := logger.Logger.Check(zap.WarnLevel, TAG); ce != nil {
			ce.Write(
				zap.Error(e),
				zap.String(`session`, session.Who()),
				zap.String(`name`, request.Name),
				zap.String(`nickname`, request.Nickname),
				zap.Int32s(`authorization`, request.Authorization),
			)
		}
		return
	}
	response = &grpc_user.AddResponse{
		Id: id,
	}
	s.SetHTTPCode(ctx, http.StatusCreated)
	if ce := logger.Logger.Check(zap.InfoLevel, TAG); ce != nil {
		ce.Write(
			zap.String(`session`, session.Who()),
			zap.Int64(`id`, id),
			zap.String(`name`, request.Name),
			zap.String(`nickname`, request.Nickname),
			zap.Int32s(`authorization`, request.Authorization),
		)
	}
	return
}

var changedPasswordResponse = grpc_user.PasswordResponse{Changed: true}
var notChangedPasswordResponse grpc_user.PasswordResponse

func (s _Impl) Password(ctx context.Context, request *grpc_user.PasswordRequest) (response *grpc_user.PasswordResponse, e error) {
	TAG := `user Password`
	session, e := s.Session(ctx)
	if e != nil {
		return
	}
	if request.Id == 0 {
		e = s.Error(codes.InvalidArgument, `id not supported 0`)
		return
	} else if !utils.MatchPassword(request.Value) {
		e = s.Error(codes.InvalidArgument, `invalid password`)
		return
	}
	changed, e := db.Password(request.Id, request.Value)
	if e != nil {
		if ce := logger.Logger.Check(zap.WarnLevel, TAG); ce != nil {
			ce.Write(
				zap.Error(e),
				zap.String(`session`, session.Who()),
				zap.Int64(`id`, request.Id),
			)
		}
		return
	}
	if changed {
		response = &changedPasswordResponse
		if ce := logger.Logger.Check(zap.InfoLevel, TAG); ce != nil {
			ce.Write(
				zap.String(`session`, session.Who()),
				zap.Int64(`id`, request.Id),
			)
		}
	} else {
		response = &notChangedPasswordResponse
	}
	return
}

var changedChangeResponse = grpc_user.ChangeResponse{Changed: true}
var notChangedChangeResponse grpc_user.ChangeResponse

func (s _Impl) Change(ctx context.Context, request *grpc_user.ChangeRequest) (response *grpc_user.ChangeResponse, e error) {
	TAG := `user Change`
	session, e := s.Session(ctx)
	if e != nil {
		return
	}
	if request.Id == 0 {
		e = s.Error(codes.InvalidArgument, `id not supported 0`)
		return
	}
	changed, e := db.Change(request.Id, request.Nickname, request.Authorization)
	if e != nil {
		if ce := logger.Logger.Check(zap.WarnLevel, TAG); ce != nil {
			ce.Write(
				zap.Error(e),
				zap.String(`session`, session.Who()),
				zap.Int64(`id`, request.Id),
				zap.String(`nickname`, request.Nickname),
				zap.Int32s(`authorization`, request.Authorization),
			)
		}
		return
	}
	if changed {
		response = &changedChangeResponse
		if ce := logger.Logger.Check(zap.InfoLevel, TAG); ce != nil {
			ce.Write(
				zap.String(`session`, session.Who()),
				zap.Int64(`id`, request.Id),
				zap.String(`nickname`, request.Nickname),
				zap.Int32s(`authorization`, request.Authorization),
			)
		}
	} else {
		response = &notChangedChangeResponse
	}
	return
}
func (s _Impl) Remove(ctx context.Context, request *grpc_user.RemoveRequest) (response *grpc_user.RemoveResponse, e error) {
	TAG := `user Password`
	session, e := s.Session(ctx)
	if e != nil {
		return
	}
	rowsAffected, e := db.Remove(request.Id)
	if e != nil {
		if ce := logger.Logger.Check(zap.WarnLevel, TAG); ce != nil {
			ce.Write(
				zap.Error(e),
				zap.String(`session`, session.Who()),
				zap.Int64s(`id`, request.Id),
			)
		}
		return
	}
	response = &grpc_user.RemoveResponse{
		RowsAffected: rowsAffected,
	}
	if ce := logger.Logger.Check(zap.InfoLevel, TAG); ce != nil {
		ce.Write(
			zap.Error(e),
			zap.String(`session`, session.Who()),
			zap.Int64s(`id`, request.Id),
			zap.Int64(`rowsAffected`, rowsAffected),
		)
	}
	return
}
