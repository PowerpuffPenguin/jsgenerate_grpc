package db

import (
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	grpc_user "{{pkg}}/protocol/features/user"
	"strconv"
{{if db}}
	"{{pkg}}/db/manipulator"
{{else}}
	"sort"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"{{pkg}}/utils"
	"strings"
	"sync"{{/if}}
)

{{if db}}
{{else}}
var _management = newManagement()

type dataSortByID []*Data

func (a dataSortByID) Len() int           { return len(a) }
func (a dataSortByID) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a dataSortByID) Less(i, j int) bool { return a[i].ID < a[j].ID }

type _Management struct {
	id   int64
	keys map[string]*Data
	sync.RWMutex
}

func newManagement() *_Management {
	return &_Management{
		keys: make(map[string]*Data),
	}
}

func (m *_Management) onReload(data json.RawMessage) (e error) {
	var items []Data
	e = json.Unmarshal(data, &items)
	if e != nil {
		return
	}
	m.Lock()
	m.id = 0
	for k := range m.keys {
		delete(m.keys, k)
	}
	for i := 0; i < len(items); i++ {
		item := &items[i]
		name := strings.ToLower(item.Name)
		if name == `` ||
			item.Password == `` ||
			!utils.MatchName(name) {
			continue
		}
		m.id++
		item.ID = m.id
		b := md5.Sum([]byte(item.Password))
		item.Password = hex.EncodeToString(b[:])
		m.keys[name] = item
	}
	m.Unlock()
	modtimeHelper.Modified(time.Now())
	return
}

func (m *_Management) Find(request *grpc_user.FindRequest) (response *grpc_user.FindResponse, e error) {
	findName := strings.ToLower(request.Name)
	var items []*Data
	m.RLock()
	for name, item := range m.keys {
		if request.Name != "" {
			if request.NameFuzzy {
				if !strings.Contains(name, findName) {
					continue
				}
			} else {
				if name != findName {
					continue
				}
			}
		}
		items = append(items, item)
	}
	count := int64(len(items))
	response = &grpc_user.FindResponse{
		Result: request.Result,
	}
	if request.Result == grpc_user.FindRequest_COUNT || request.Result == grpc_user.FindRequest_DATA_COUNT {
		response.Count = count
	}
	if request.Result == grpc_user.FindRequest_DATA || request.Result == grpc_user.FindRequest_DATA_COUNT {
		if request.Offset < count {
			sort.Sort(dataSortByID(items))

			offset := int(request.Offset)
			end := request.Offset + request.Limit
			if end > count {
				end = count
			}

			items = items[offset:end]
			if len(items) > 0 {
				response.Data = make([]*grpc_user.Data, len(items))
				for i, v := range items {
					response.Data[i] = v.ToPB()
				}
			}
		}
	}
	m.RUnlock()
	return
}

func (m *_Management) Add(name, nickname, password string, authorization []int32) (id int64, e error) {
	item := Data{
		Name:          name,
		Nickname:      nickname,
		Password:      password,
		Authorization: authorization,
	}
	m.Lock()
	key := strings.ToLower(name)
	if _, ok := m.keys[key]; ok {
		e = status.Error(codes.AlreadyExists, `username already exists : `+name)
	} else {
		m.id++
		id = m.id
		item.ID = id
		m.keys[key] = &item
	}
	m.Unlock()
	if e == nil {
		modtimeHelper.Modified(time.Now())
	}
	return
}

func (m *_Management) Password(id int64, value string) (changed bool, e error) {
	m.Lock()
	for _, item := range m.keys {
		if item.ID == id {
			if item.Password != value {
				changed = true
				item.Password = value
			}
			break
		}
	}
	m.Unlock()
	return
}

func (m *_Management) Change(id int64, nickname string, authorization []int32) (changed bool, e error) {
	m.Lock()
	for _, item := range m.keys {
		if item.ID == id {
			if nickname != item.Nickname || len(item.Authorization) != len(authorization) {
				item.Nickname = nickname
				item.Authorization = authorization
				changed = true
			} else {
				for i := 0; i < len(authorization); i++ {
					if item.Authorization[i] != authorization[i] {
						item.Authorization = authorization
						changed = true
						break
					}
				}
			}
			break
		}
	}
	m.Unlock()
	if changed {
		modtimeHelper.Modified(time.Now())
	}
	return
}

func (m *_Management) Remove(ids []int64) (rowsAffected int64, e error) {
	m.Lock()
	for key, item := range m.keys {
		match := false
		for _, id := range ids {
			if id == item.ID {
				match = true
				break
			}
		}
		if match {
			rowsAffected++
			delete(m.keys, key)
		}
	}
	m.Unlock()
	if rowsAffected != 0 {
		modtimeHelper.Modified(time.Now())
	}
	return
}{{/if}}

// Find select data
func Find(request *grpc_user.FindRequest) (*grpc_user.FindResponse, error) {
	if request.Result < grpc_user.FindRequest_DATA ||
		request.Result > grpc_user.FindRequest_DATA_COUNT {
		return nil, status.Error(codes.InvalidArgument, `not support result enum : `+strconv.FormatInt(int64(request.Result), 10))
	}
{{if db}}
	session := manipulator.Session()
	defer session.Close()
	var beans []Data
	var response grpc_user.FindResponse
	response.Result = request.Result
	if request.Name != `` {
		if request.NameFuzzy {
			session.Where(colName+` like ?`, `%`+request.Name+`%`)
		} else {
			session.Where(colName+` = ?`, request.Name)
		}
	}
	switch request.Result {
	case grpc_user.FindRequest_COUNT:
		count, e := session.Count(&Data{})
		if e != nil {
			return nil, e
		}
		response.Count = count
	case grpc_user.FindRequest_DATA:
		e := session.OrderBy(colID).Limit(int(request.Limit), int(request.Offset)).Find(&beans)
		if e != nil {
			return nil, e
		}
	default: // FindRequest_DATA_COUNT
		count, e := session.OrderBy(colID).Limit(int(request.Limit), int(request.Offset)).FindAndCount(&beans)
		if e != nil {
			return nil, e
		}
		response.Count = count
	}
	if len(beans) != 0 {
		response.Data = make([]*grpc_user.Data, len(beans))
		for i := 0; i < len(beans); i++ {
			response.Data[i] = beans[i].ToPB()
		}
	}
	return &response, nil
{{else}}
	return _management.Find(request)
{{/if}}
}
// Password change password
func Password(id int64, value string) (bool, error) {
{{if db}}
	rows, e := manipulator.Engine().
		ID(id).
		Cols(colPassword).
		Update(&Data{
			Password: value,
		})
	if e != nil {
		return false, e
	}
	return rows != 0, nil
{{else}}
	return _management.Password(id, value)
{{/if}}
}
// Change properties
func Change(id int64, nickname string, authorization []int32) (bool, error) {
{{if db}}
	rows, e := manipulator.Engine().
		ID(id).
		Cols(colNickname, colAuthorization).
		Update(&Data{
			Nickname:      nickname,
			Authorization: authorization,
		})
	if e != nil {
		return false, e
	}
	changed := rows !=0
	if changed {
		modtimeHelper.Modified(time.Now())
	}
	return changed, nil
{{else}}
	return _management.Change(id, nickname, authorization)
{{/if}}
}
// Remove data
func Remove(ids []int64) (int64, error) {
	if len(ids) == 0 {
		return 0, nil
	}
{{if db}}
	args := make([]interface{}, len(ids))
	for i, id := range ids {
		args[i] = id
	}
	rows, e := manipulator.Engine().
		In(colID, args...).
		Delete(&Data{})
	if e != nil {
		return 0, e
	}
	if rows != 0 {
		modtimeHelper.Modified(time.Now())
	}
	return rows, nil
{{else}}
	return _management.Remove(ids)
{{/if}}
}
// Add data
func Add(name, nickname, password string, authorization []int32) (int64, error) {
{{if db}}
	bean := &Data{
		Name:          name,
		Nickname:      nickname,
		Password:      password,
		Authorization: authorization,
	}
	_, e := manipulator.Engine().InsertOne(bean)
	if e != nil {
		return 0, e
	}
	modtimeHelper.Modified(time.Now())
	return bean.ID, nil
{{else}}
	return _management.Add(name, nickname, password, authorization)
{{/if}}
}