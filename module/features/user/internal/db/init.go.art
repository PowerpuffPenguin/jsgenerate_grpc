package db

import (
	"context"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"{{pkg}}/db/jwt"
	"{{pkg}}/db/manipulator"
	"{{pkg}}/db/signals"
    "{{pkg}}/utils"{{if db}}
	"{{pkg}}/db"
	"crypto/rand"
	"fmt"
	"xorm.io/xorm"{{else}}
    "strings"{{/if}}
    "time"
)

var modtimeHelper = manipulator.NewModtimeHelper(manipulator.ModtimeUser, true, false)

// LastModified .
func LastModified() (modtime time.Time) {
	modtime, _ = modtimeHelper.LastModified()
	return
}

// OnStart .
func OnStart(data json.RawMessage) (e error) {
	e = modtimeHelper.Init(time.Now().Unix(), ``, `features.user`)
	if e != nil {
		return
	}
{{if db}}
	_, e = manipulator.Transaction(func(session *xorm.Session) (result interface{}, e error) {
		bean := &Data{}
		e = manipulator.SyncTable(session, bean)
		if e != nil {
			return
		}
		count, e := session.Count(bean)
		if e != nil {
			return
		}
		if count == 0 {
			name := `king`
			b := make([]byte, 8)
			rand.Read(b)
			p := md5.Sum(b)
			password := hex.EncodeToString(p[:])
			fmt.Println(`user =`, name)
			fmt.Println(`password =`, password)

			p = md5.Sum(([]byte)(password))
			_, e = session.InsertOne(&Data{
				Name:          name,
				Password:      hex.EncodeToString(p[:]),
				Authorization: []int32{db.Root},
			})
		}
		return
	})
	if e != nil {
		return
	}
{{else}}
	e = _management.onReload(data)
	if e != nil {
		return
	}
{{/if}}

	signal := signals.Default()
	signal.Session.ConnectPost(login)
	signal.Session.ConnectPassword(password)
	return
}

// OnReload .
func OnReload(data json.RawMessage) (e error) {
	{{if !db}}
	e = _management.onReload(data)
	if e != nil {
		return
	}
	modtimeHelper.Modified(time.Now()){{/if}}
	return
}
func login(ctx context.Context, name, password, salt string) (session *jwt.Session, e error) {
{{if db}}
	var bean Data
	exists, e := manipulator.Engine().
		Where(colName+` = ?`, name).
		Context(ctx).
		Get(&bean)
	if e != nil {
		return
	} else if exists {
		b := md5.Sum([]byte(bean.Password + salt))
		if password == hex.EncodeToString(b[:]) {
			session = &jwt.Session{
				ID:            bean.ID,
				Name:          bean.Name,
				Nickname:      bean.Nickname,
				Authorization: bean.Authorization,
				Salt:          utils.NewSalt(),
				Access:        true,
			}
		}
	}
{{else}}
	_management.RLock()
	data, ok := _management.keys[strings.ToLower(name)]
	_management.RUnlock()
	if !ok {
		return
	}
	b := md5.Sum([]byte(data.Password + salt))
	if password == hex.EncodeToString(b[:]) {
		session = &jwt.Session{
			ID:            data.ID,
			Name:          data.Name,
			Nickname:      data.Nickname,
			Authorization: data.Authorization,
			Salt:          utils.NewSalt(),
			Access:        true,
		}
	}
{{/if}}
	return
}
func password(ctx context.Context, id int64, old, password string) (changed bool, e error) {
{{if db}}
	rows, e := manipulator.Engine().
		ID(id).
		Where(colPassword+` = ?`, old).
		Update(&Data{Password: password})
	if e != nil {
		return
	}
	changed = rows != 0
{{else}}
	_management.Lock()
	for _, item := range _management.keys {
		if item.ID == id {
			if item.Password == old {
				item.Password = password
				changed = true
			}
			break
		}
	}
	_management.Unlock()
{{/if}}
	return
}
